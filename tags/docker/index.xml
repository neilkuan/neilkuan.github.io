<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DOCKER on Neil Blog</title>
    <link>https://blog.neilkuan.net/tags/docker/</link>
    <description>Recent content in DOCKER on Neil Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 26 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.neilkuan.net/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introducing GitHub Container Registry !!!</title>
      <link>https://blog.neilkuan.net/posts/github-container-registry/</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.neilkuan.net/posts/github-container-registry/</guid>
      <description>Github Container Registry source new : https://github.blog/2020-09-01-introducing-github-container-registry/
自去年發布GitHub Packages以來，已經從GitHub下載了數億個軟件包，其中Docker是Packages中僅次於npm的第二受歡迎的ecosystem，儘管GitHub Packages已經為團隊提供了更大的軟件供應鏈可追溯性，但如今，GitHub 正在添加新功能，以改善它通過GitHub Container Registry為開發人員提供的體驗和性能。
Introducing GitHub Container Registry GitHub Container Registry現已作為公共Beta發布，它改進了我們在GitHub Packages中處理容器的方式。通過今天引入的新功能，您可以更好地實施訪問策略，鼓勵使用標準 base image，並通過在整個 organization 中更輕鬆地共享來促進內部使用。並且提供了開源專案可以拜放 container 的地方for free .
廢話結束 ，那麼要怎麼做才能 在 Github Container Registry 上面擺放 Public image 給予他人來下載勒
首先準備 github access token (以下為需要的權限) Select the read:packages scope to download container images and read their metadata. Select the write:packages scope to download and upload container images and read and write their metadata.</description>
    </item>
    
    <item>
      <title>Building Docker images with Kaniko !!!</title>
      <link>https://blog.neilkuan.net/posts/building-docker-images-with-kaniko/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.neilkuan.net/posts/building-docker-images-with-kaniko/</guid>
      <description>Kaniko !!! Building Docker images with Kaniko kaniko is a tool to build container images from a Dockerfile, inside a container or Kubernetes cluster. kaniko solves two problems with using the Docker-in-Docker build method:
Docker-in-Docker requires privileged mode in order to function, which is a significant security concern. Docker-in-Docker generally incurs a performance penalty and can be quite slow. When building an image with kaniko and CI/CD, you should be aware of a few important details:</description>
    </item>
    
    <item>
      <title>CDK for Terraform Amazing</title>
      <link>https://blog.neilkuan.net/posts/cdk_for_terraform_amazing_docker/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.neilkuan.net/posts/cdk_for_terraform_amazing_docker/</guid>
      <description>source: https://learn.hashicorp.com/terraform/cdktf/cdktf-install
source: https://www.hashicorp.com/blog/cdk-for-terraform-enabling-python-and-typescript-support/
On Linux Install Terraform Download package : https://www.terraform.io/downloads.html
# linux x86 $ wget https://releases.hashicorp.com/terraform/0.12.28/terraform_0.12.28_linux_amd64.zip $ unzip terraform_0.12.28_linux_amd64.zip $ echo $PATH $ chmod +x terraform $ sudo mv terraform /usr/local/bin/ Install CDK for Terraform
https://learn.hashicorp.com/terraform/cdktf/cdktf-install#quick-start-tutorial
$ npm install --global cdktf-cli $ npm install --global cdktf-cli@next # Test cdktf $ cdktf $ cdktf deploy --help $ mkdir typescript-docker &amp;amp;&amp;amp; cd $_ $ cdktf init --template=typescript --local # modify origin cdktf.</description>
    </item>
    
  </channel>
</rss>
